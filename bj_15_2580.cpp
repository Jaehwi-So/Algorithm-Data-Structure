/*bj_2580
문제
스도쿠는 18세기 스위스 수학자가 만든 '라틴 사각형'이랑 퍼즐에서 유래한 것으로 현재 많은 인기를 누리고 있다.
이 게임은 아래 그림과 같이 가로, 세로 각각 9개씩 총 81개의 작은 칸으로 이루어진 정사각형 판 위에서 이뤄지는데,
게임 시작 전 몇 몇 칸에는 1부터 9까지의 숫자 중 하나가 쓰여 있다.

나머지 빈 칸을 채우는 방식은 다음과 같다.
각각의 가로줄과 세로줄에는 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
굵은 선으로 구분되어 있는 3x3 정사각형 안에도 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
위의 예의 경우, 첫째 줄에는 1을 제외한 나머지 2부터 9까지의 숫자들이 이미 나타나 있으므로 
첫째 줄 빈칸에는 1이 들어가야 한다.

또한 위쪽 가운데 위치한 3x3 정사각형의 경우에는 3을 제외한 나머지 숫자들이 이미 쓰여있으므로 
가운데 빈 칸에는 3이 들어가야 한다.

이와 같이 빈 칸을 차례로 채워 가면 다음과 같은 최종 결과를 얻을 수 있다.

게임 시작 전 스도쿠 판에 쓰여 있는 숫자들의 정보가 주어질 때 모든 빈 칸이 채워진 
최종 모습을 출력하는 프로그램을 작성하시오.
입력
아홉 줄에 걸쳐 한 줄에 9개씩 게임 시작 전 스도쿠판 각 줄에 쓰여 있는 숫자가 한 칸씩 띄워서 차례로 주어진다.
스도쿠 판의 빈 칸의 경우에는 0이 주어진다.스도쿠 판을 규칙대로 채울 수 없는 경우의 입력은 주어지지 않는다.
출력
모든 빈 칸이 채워진 스도쿠 판의 최종 모습을 아홉줄에 걸쳐 한 줄에 9개씩 한 칸씩 띄워서 출력한다.
스도쿠 판을 채우는 방법이 여럿인 경우는 그 중 하나만을 출력한다.
*/
/* 입력예제
0 3 5 4 6 9 2 7 8
7 8 2 1 0 5 6 0 9
0 6 0 2 7 8 1 3 5
3 2 1 0 4 6 8 9 7
8 0 4 9 1 3 5 0 6
5 9 6 8 2 0 4 1 3
9 1 7 6 5 2 0 8 0
6 0 3 7 0 1 9 5 2
2 5 8 3 9 4 7 6 0
*/
#include<stdio.h>
#include<stdlib.h>

int mat[9][9];	// 스토쿠 핀
bool end = false;	//결과를 하나만 출력하기 위해 만든 flag

/* 결과 출력 */
void print_result() {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			printf("%d ", mat[i][j]);
		}
		printf("\n");
	}
}
/* 유망성 판단 */
bool promising(int i, int j) {	
	//현재 마디 : mat[i][j]
	int k, x, y;
	if (i > 8 || j > 8) {	//현재 마디가 index 초과를 한다면 유망하지 않음
		return false;
	}
	for (k = 0; k < 9; k++) {	//현재 마디에서 행과 열에 중복되는 수가 있다면 유망하지 않음
		if ((mat[i][j] == mat[i][k] && j != k) || (mat[i][j] == mat[k][j] && i != k)) {
			return false;
		}
	}

	//현재 마디에서 반경 3x3에 같은 수가 있다면 유망하지 않음.
	int range_x = i / 3;
	int range_y = j / 3;
	for (x = range_x * 3; x < (range_x * 3) + 3; x++) {
		for (y = range_y * 3; y < (range_y * 3) + 3; y++) {
			if (mat[i][j] == mat[x][y] && !(i == x && j == y)) {
				return false;
			}
		}
	}

	//나머지 경우 유망함
	return true;
}

/* 스도쿠 판에 숫자 채우기 */
void put_number(int i, int j, bool start) {// (행, 열, 해당 행을 처음 검사할 때의 flag)

	if (end == true) {	//이미 결과를 출력했을 시 종료
		return;
	}

	//현재 마디가 유망하거나 행을 처음 검사하는 경우
	else if ((promising(i, j)) || start == true) {	

		if (i == 8 && j == 8 && mat[i][j] != 0) {	//스도쿠 판의 끝까지 채워졌을 경우
			print_result();
			end = true;	//종료 flag
		}

		else {
			for (int k = j; k < 9; k++) {	//해당 행의 모든 열을 검사하여
				if (mat[i][k] == 0) {	//스토쿠 판에서 채울 부분이 있을 시
					for (int l = 1; l <= 9; l++) {	
						mat[i][k] = l;	//1부터 9까지의 수를 모두 채워본다.
						put_number(i, k, false);	//가지치기
						mat[i][k] = 0;	//백트래킹
					}
				}
			}

			bool ck = true;
			for (int k = 0; k < 9; k++) {
				if (mat[i][k] == 0) {
					ck = false;
					break;
				}
			}
			//현재 행이 8을 넘지 않았고 현재 행의 모든 열에 수가 있는 경우
			if (i < 8 && ck == true) {
				put_number(i + 1, 0, true);	//다음 행 검사
			}
		}

	}
}



int main() {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			scanf("%d", &mat[i][j]);
		}
	}
	put_number(0, 0, true);
	return 0;
}